# Optimized Dockerfile for Node.js Backend Server
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy root package files for workspace
COPY package*.json ./

# Copy workspace package files
COPY packages/api/package*.json ./packages/api/
COPY packages/api/tsconfig.json ./packages/api/
COPY packages/api/tsconfig.prod.json ./packages/api/

# Install all dependencies (including devDependencies for build)
RUN npm ci --workspace=api --include-workspace-root && \
    npm cache clean --force

# Copy source code
COPY packages/api/src ./packages/api/src

# Build TypeScript using production config
RUN npm run build:prod --workspace=api

# Remove devDependencies for production
RUN npm prune --production --workspace=api

# Production stage
FROM node:20-alpine

# Set working directory
WORKDIR /app

# Create a non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S -D -H -u 1001 -h /app -s /sbin/nologin -G nodejs -g nodejs nodejs

# Copy only production node_modules from builder (hoisted at root level)
COPY --from=builder /app/node_modules ./node_modules

# Copy compiled source code from builder
COPY --from=builder /app/packages/api/dist ./dist

# Create necessary directories and set permissions
RUN mkdir -p /app/logs && \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose the port the app runs on
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Start the application
CMD ["node", "dist/server.js"]
