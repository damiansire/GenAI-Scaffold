# Multi-stage Dockerfile for Angular Client Application
# Stage 1: Build the Angular application
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy root package files for workspace support
COPY package*.json ./

# Copy client package files for dependency installation
COPY packages/client/package*.json ./packages/client/

# Install dependencies (including devDependencies needed for build)
RUN npm ci --workspace=client --include-workspace-root && \
    npm cache clean --force

# Copy source code
COPY packages/client/ ./packages/client/

# Build the Angular application
RUN npm run build:prod --workspace=client

# Stage 2: Serve the application with Nginx
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built application from builder stage (Angular outputs to packages/client/dist/client/browser)
COPY --from=builder /app/packages/client/dist/client/browser /usr/share/nginx/html

# Copy custom Nginx configuration for SPA
COPY .docker/nginx.conf /etc/nginx/nginx.conf

# Nginx alpine image already has nginx user, just set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    chmod -R 755 /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]
